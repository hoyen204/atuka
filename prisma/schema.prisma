generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User model - main user accounts
model User {
  name               String      @db.VarChar(255)
  zaloId             String      @id @map("zalo_id") @db.VarChar(255)
  licenseType        LicenseType @map("license_type")
  licenseExpired     DateTime?   @map("license_expired")
  email              String?     @db.VarChar(255)
  password           String?     @db.VarChar(255)
  createdAt          DateTime    @default(now()) @map("created_at")
  updatedAt          DateTime    @updatedAt @map("updated_at")
  isAdmin            Boolean     @default(false) @map("is_admin")
  isSubscribed       Boolean     @default(false) @map("is_subscribed")
  accountPlus        Int         @default(0) @map("account_plus")
  accountPlusExpired DateTime?   @map("account_plus_expired")
  canTakeover        Boolean     @default(false) @map("can_takeover")
  banned             Boolean     @default(false)
  canDoBreakBossDefense Boolean  @default(false) @map("can_do_break_boss_defense")
  username           String?     @db.VarChar(255)

  // Relations
  accounts       Account[]
  proxies        Proxy[]
  deletedProxies DeletedProxy[]
  favoriteMines  UserFavoriteMine[]
  userGroups     UserGroup[]
  payments       Payment[]
  wallet         UserWallet?

  @@index([zaloId])
  @@map("users")
}

// Account model - game accounts
model Account {
  id                    Int       @id
  name                  String    @db.VarChar(255)
  cookie                String    @db.Text
  toggle                Boolean   @default(true)
  mineId                String?   @map("mineId") @db.VarChar(255)
  creatorId             String    @map("creatorId") @db.VarChar(255)
  security              Json?
  securityUpdatedAt     DateTime? @map("securityUpdatedAt")
  cultivation           Int?
  bootleNeckCultivation Int?      @map("bootleNeckCultivation")
  gem                   Int?
  fairyGem              Int?      @map("fairyGem")
  createdAt             DateTime  @default(now()) @map("createdAt")
  updatedAt             DateTime  @updatedAt @map("updatedAt")
  mineTimeRange         Json?     @map("mineTimeRange")
  element               String?   @db.VarChar(255)
  friendToGiftId        Json?     @map("friendToGiftId")
  secretKey             String?   @map("secretKey") @db.VarChar(255)
  birthday              String?   @db.VarChar(255)
  username              String?   @db.VarChar(255)
  password              String?   @map("password") @db.VarChar(255)
  proxy                 String?   @db.VarChar(255)
  email                 String?   @db.VarChar(255)
  autoElement           Boolean?  @default(true) @map("autoElement")
  isLogout              Boolean?  @default(false) @map("isLogout")
  availableBuffAmount   Int       @default(100) @map("availableBuffAmount")
  autoLoginTimeRange    Json      @map("autoLoginTimeRange")
  coin                  Int?
  lockCoin              Int?      @map("lockCoin")
  clanRole              String?   @map("clanRole") @db.VarChar(255)
  clanId                String?   @map("clanId") @db.VarChar(255)
  clanName              String?   @map("clanName") @db.VarChar(255)
  mineType              MineType? @default(full) @map("mineType")
  reserveLastAttack     Boolean?  @default(true) @map("reserveLastAttack")
  autoQuiz              Boolean?  @default(false) @map("autoQuiz")
  autoBiCanh            Boolean?  @default(true) @map("autoBiCanh")
  minChestThreshold     Int?      @default(300) @map("minChestThreshold")
  minFairyGemThreshold  Int?      @default(500) @map("minFairyGemThreshold")
  anthanTimeRange       Json?     @map("anthanTimeRange")

  // Relations
  creator           User                   @relation(fields: [creatorId], references: [zaloId], onDelete: Cascade, onUpdate: Cascade)
  accountGroups     AccountGroup[]

  @@index([toggle])
  @@index([securityUpdatedAt])
  @@index([cultivation])
  @@index([creatorId])
  @@map("accounts")
}

// Clan questions for automation
model ClanQuestion {
  id         Int      @id @default(autoincrement())
  question   String   @db.VarChar(255)
  answer     String   @db.Text
  createdAt  DateTime @default(now()) @map("createdAt")
  updatedAt  DateTime @updatedAt @map("updatedAt")
  questionId Int?     @map("questionId")

  @@map("clan_questions")
}

model ClanQuestionVanDap {
  id         Int      @id @default(autoincrement())
  question   String   @db.VarChar(255)
  answer     String   @db.Text
  createdAt  DateTime @default(now()) @map("createdAt")
  updatedAt  DateTime @updatedAt @map("updatedAt")
  questionId Int?     @map("questionId")

  @@map("clan_questions_van_dap")
}

// Clan information
model Clan {
  id          Int    @id
  name        String @db.VarChar(255)
  level       Int
  leader      String @db.VarChar(255)
  leaderId    Int    @map("leader_id")
  memberCount Int    @map("member_count")
  memberLimit Int    @map("member_limit")

  @@map("clans")
}

// Configuration settings
model Config {
  key   String @id @db.VarChar(255)
  value String @db.VarChar(255)

  @@map("configs")
}

// Mine locations
model Mine {
  id         Int              @id
  name       String           @db.VarChar(255)
  isPeaceful Boolean          @map("isPeaceful")
  updatedAt  DateTime         @updatedAt @map("updatedAt")
  createdAt  DateTime         @default(now()) @map("createdAt")
  type       MineResourceType

  // Relations
  favoritedBy UserFavoriteMine[]

  @@map("mines")
}

// User favorite mines
model UserFavoriteMine {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id") @db.VarChar(255)
  mineId    Int      @map("mine_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [zaloId], onDelete: Cascade, onUpdate: Cascade)
  mine Mine @relation(fields: [mineId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, mineId])
  @@index([userId])
  @@index([mineId])
  @@map("user_favorite_mines")
}

// Proxy management
model Proxy {
  id        Int     @id @default(autoincrement())
  host      String  @db.VarChar(255)
  port      Int
  username  String? @db.VarChar(255)
  password  String? @db.VarChar(255)
  enabled   Boolean @default(true)
  creatorId String  @map("creator_id") @db.VarChar(255)

  // Relations
  creator User @relation(fields: [creatorId], references: [zaloId], onDelete: NoAction, onUpdate: Cascade)

  @@index([creatorId])
  @@map("proxies")
}

model DeletedProxy {
  id        Int      @id @default(autoincrement())
  host      String   @db.VarChar(255)
  port      Int
  username  String?  @db.VarChar(255)
  password  String?  @db.VarChar(255)
  enabled   Boolean  @default(true)
  creatorId String   @map("creator_id") @db.VarChar(255)
  reason    String?  @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  creator User @relation(fields: [creatorId], references: [zaloId], onDelete: NoAction, onUpdate: Cascade)

  @@index([creatorId])
  @@map("deleted_proxies")
}

// Wedding gift tracking
model WeddingReceived {
  id               Int             @id @default(autoincrement())
  accountId        Int?            @map("accountId")
  roomId           String          @map("roomId") @db.VarChar(255)
  message          String          @db.VarChar(255)
  createdAt        DateTime        @default(now()) @map("createdAt")
  updatedAt        DateTime        @updatedAt @map("updatedAt")
  accountName      String          @map("accountName") @db.VarChar(255)
  accountCreatorId String          @map("accountCreatorId") @db.VarChar(255)
  amount           Int
  type             WeddingGiftType

  @@index([accountId])
  @@index([roomId])
  @@index([createdAt])
  @@map("wedding_received")
}

// User Groups for account management
model UserGroup {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  label     String   @db.VarChar(50)
  creatorId String   @map("creatorId") @db.VarChar(255)
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  // Relations
  creator       User           @relation(fields: [creatorId], references: [zaloId], onDelete: Cascade, onUpdate: Cascade)
  accountGroups AccountGroup[]

  @@index([creatorId])
  @@index([label])
  @@map("user_groups")
}

// Account Group associations (many-to-many between accounts and user groups)
model AccountGroup {
  accountId Int      @map("accountId")
  groupId   Int      @map("groupId")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  // Relations
  account Account   @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  group   UserGroup @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([accountId, groupId])
  @@unique([accountId, groupId])
  @@index([groupId])
  @@map("account_groups")
}

// Account Daily Activities tracking
model AccountDailyActivity {
  id                Int      @id @default(autoincrement())
  accountId         Int      @map("accountId")
  progress          Int?
  totalCultivation  Int?     @map("totalCultivation")
  totalGem          Int?     @map("totalGem")
  detail            Json?
  createdAt         DateTime @default(now()) @map("createdAt")
  updatedAt         DateTime @updatedAt @map("updatedAt")

  @@index([accountId])
  @@map("account_daily_activities")
}

// HH3D Members tracking
model Hh3dMember {
  id   Int     @id
  name String  @db.VarChar(255)
  tuVi Int?    @map("tu_vi")

  @@map("hh3d_members")
}

// Enums
enum LicenseType {
  FREE
  BASIC
  PRO
}

enum MineType {
  min
  max
  full
}

enum MineResourceType {
  gold
  silver
  copper
}

enum WeddingGiftType {
  TienNgoc  @map("Tiên Ngọc")
  TuVi      @map("Tu Vi")
  TinhThach @map("Tinh Thạch")
  Xu        @map("Xu")
}

model Payment {
  id             String        @id @default(cuid())
  userId         String        @map("user_id") @db.VarChar(255)
  amount         Int
  licenseType    LicenseType   @map("license_type")
  accountPlus    Int           @default(0) @map("account_plus")
  status         PaymentStatus @default(PENDING)
  sepayOrderId   String?       @unique @map("sepay_order_id") @db.VarChar(255)
  sepayTxnId     String?       @map("sepay_txn_id") @db.VarChar(255)
  expiresAt      DateTime      @map("expires_at")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  paidAt         DateTime?     @map("paid_at")
  description    String?       @db.Text

  user User @relation(fields: [userId], references: [zaloId], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
  @@index([status])
  @@index([sepayOrderId])
  @@index([sepayOrderId, status]) // Composite index for webhook lookups
  @@index([paidAt]) // Index for payment completion queries
  @@map("payments")
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  EXPIRED
  CANCELLED
}

model UserWallet {
  id          String   @id @default(cuid())
  userId      String   @map("user_id") @db.VarChar(255)
  balance     Int      @default(0) // Số dư VNĐ
  totalDeposit Int     @default(0) @map("total_deposit") // Tổng đã nạp
  totalSpent  Int      @default(0) @map("total_spent") // Tổng đã tiêu
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user        User     @relation(fields: [userId], references: [zaloId], onDelete: Cascade, onUpdate: Cascade)
  transactions WalletTransaction[]

  @@unique([userId])
  @@map("user_wallets")
}

enum TransactionType {
  DEPOSIT    // Nạp tiền
  PURCHASE   // Mua package
  REFUND     // Hoàn tiền
  BONUS      // Thưởng
  PENALTY    // Phạt
}

model WalletTransaction {
  id          String          @id @default(cuid())
  walletId    String          @map("wallet_id")
  type        TransactionType
  amount      Int             // Số tiền VNĐ (có thể âm)
  balanceBefore Int           @map("balance_before") // Số dư trước giao dịch
  balanceAfter  Int           @map("balance_after")  // Số dư sau giao dịch
  description String?         @db.Text
  referenceId String?         @map("reference_id") // ID tham chiếu (payment ID, package ID, etc.)
  createdAt   DateTime        @default(now()) @map("created_at")

  wallet      UserWallet      @relation(fields: [walletId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([walletId])
  @@index([type])
  @@index([createdAt])
  @@map("wallet_transactions")
}